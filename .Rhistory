l1[[p]]
l1[["y"]]
names(l0)=c("x","y","z")
names(l1)=c("x","y","z")
l1[["y"]]
#----------------------------------------------------
## 3.提取列表子集
# 用[]，可以取出列表中的一些成分，作为一个新的（子）列表。
# [] 中可以用字符向量表示成分名字，用数值向量表示成分位置，或用逻辑向量指定是否选择，来取出列表成分。
l1["x"]
li[c("x","z")]
l1[c("x","z")]
#----------------------------------------------------
## 4.对列表的成分赋值
# 即先访问（提取）到列表的成分，再赋以相适应的值
l1$x=0
# 同时给多个列表成分赋值：
l1[c("x", "y")] = list(x = "new value for y", y = c(3, 1))
#移除列表中的某些成分，只需赋值为 NULL：
l1[c("z", "m")] = NULL
#----------------------------------------------------
## 5. 列表函数
# as.list()将向量转换成列表：
l2 = as.list(c(a=1,b=2))
l2
# unlist()将一个列表打破成分界线，强制转换成一个向量^fn26：
unlist(l2)
l2.pluck()
# tidyverse系列中的purrr包为方便操作列表，提供了一系列操作列表的函数：
#
# pluck()：同 [[ 提取列表中的元素
#             keep(): 保留满足条件的元素
#             discard(): 删除满足条件的元素
#             compact(): 删除列表中的空元素
#             append()：在列表末尾增加元素
#             flatten(): 摊平列表（只摊平一层）
library(tidyverse)
l2.pluck()
install.packages(c("BH", "bit", "blob", "bookdown", "boot", "broom", "bslib", "cachem", "callr", "class", "cli", "codetools", "colorspace", "commonmark", "cpp11", "curl", "data.table", "dbplyr", "digest", "dplyr", "dtplyr", "evaluate", "extrafont", "fansi", "fastmap", "fontawesome", "forcats", "foreign", "fs", "gargle", "gdtools", "gert", "ggfittext", "ggplot2", "gh", "googledrive", "googlesheets4", "gtable", "haven", "highr", "hms", "htmltools", "htmlwidgets", "httpuv", "httr", "installr", "isoband", "jsonlite", "knitr", "lattice", "lubridate", "magrittr", "markdown", "Matrix", "mgcv", "modelr", "nlme", "openssl", "pillar", "pkgbuild", "pkgdown", "pkgload", "plyr", "processx", "ps", "purrr", "ragg", "Rcpp", "RCurl", "readr", "readxl", "rlang", "rmarkdown", "RODBC", "roxygen2", "rpart", "Rttf2pt1", "sass", "shiny", "sourcetools", "spatial", "stringi", "stringr", "survival", "sys", "testthat", "tibble", "tidyr", "tidyselect", "tidyverse", "tinytex", "tm", "utf8", "vcd", "vctrs", "vroom", "whisker", "xfun", "XLConnect", "XML", "xml2", "yaml", "zip", "zoo"))
install.packages(c("BH", "bit", "blob", "bookdown", "boot", "broom", "bslib", "cachem", "callr", "class", "cli", "codetools", "colorspace", "commonmark", "cpp11", "curl", "data.table", "dbplyr", "digest", "dplyr", "dtplyr", "evaluate", "extrafont", "fansi", "fastmap", "fontawesome", "forcats", "foreign", "fs", "gargle", "gdtools", "gert", "ggfittext", "ggplot2", "gh", "googledrive", "googlesheets4", "gtable", "haven", "highr", "hms", "htmltools", "htmlwidgets", "httpuv", "httr", "installr", "isoband", "jsonlite", "knitr", "lattice", "lubridate", "magrittr", "markdown", "Matrix", "mgcv", "modelr", "nlme", "openssl", "pillar", "pkgbuild", "pkgdown", "pkgload", "plyr", "processx", "ps", "purrr", "ragg", "Rcpp", "RCurl", "readr", "readxl", "rlang", "rmarkdown", "RODBC", "roxygen2", "rpart", "Rttf2pt1", "sass", "shiny", "sourcetools", "spatial", "stringi", "stringr", "survival", "sys", "testthat", "tibble", "tidyr", "tidyselect", "tidyverse", "tinytex", "tm", "utf8", "vcd", "vctrs", "vroom", "whisker", "xfun", "XLConnect", "XML", "xml2", "yaml", "zip", "zoo"))
install.packages(c("BH", "bit", "blob", "bookdown", "boot", "broom", "bslib", "cachem", "callr", "class", "cli", "codetools", "colorspace", "commonmark", "cpp11", "curl", "data.table", "dbplyr", "digest", "dplyr", "dtplyr", "evaluate", "extrafont", "fansi", "fastmap", "fontawesome", "forcats", "foreign", "fs", "gargle", "gdtools", "gert", "ggfittext", "ggplot2", "gh", "googledrive", "googlesheets4", "gtable", "haven", "highr", "hms", "htmltools", "htmlwidgets", "httpuv", "httr", "installr", "isoband", "jsonlite", "knitr", "lattice", "lubridate", "magrittr", "markdown", "Matrix", "mgcv", "modelr", "nlme", "openssl", "pillar", "pkgbuild", "pkgdown", "pkgload", "plyr", "processx", "ps", "purrr", "ragg", "Rcpp", "RCurl", "readr", "readxl", "rlang", "rmarkdown", "RODBC", "roxygen2", "rpart", "Rttf2pt1", "sass", "shiny", "sourcetools", "spatial", "stringi", "stringr", "survival", "sys", "testthat", "tibble", "tidyr", "tidyselect", "tidyverse", "tinytex", "tm", "utf8", "vcd", "vctrs", "vroom", "whisker", "xfun", "XLConnect", "XML", "xml2", "yaml", "zip", "zoo"))
install.packages(c("BH", "bit", "blob", "bookdown", "boot", "broom", "bslib", "cachem", "callr", "class", "cli", "codetools", "colorspace", "commonmark", "cpp11", "curl", "data.table", "dbplyr", "digest", "dplyr", "dtplyr", "evaluate", "extrafont", "fansi", "fastmap", "fontawesome", "forcats", "foreign", "fs", "gargle", "gdtools", "gert", "ggfittext", "ggplot2", "gh", "googledrive", "googlesheets4", "gtable", "haven", "highr", "hms", "htmltools", "htmlwidgets", "httpuv", "httr", "installr", "isoband", "jsonlite", "knitr", "lattice", "lubridate", "magrittr", "markdown", "Matrix", "mgcv", "modelr", "nlme", "openssl", "pillar", "pkgbuild", "pkgdown", "pkgload", "plyr", "processx", "ps", "purrr", "ragg", "Rcpp", "RCurl", "readr", "readxl", "rlang", "rmarkdown", "RODBC", "roxygen2", "rpart", "Rttf2pt1", "sass", "shiny", "sourcetools", "spatial", "stringi", "stringr", "survival", "sys", "testthat", "tibble", "tidyr", "tidyselect", "tidyverse", "tinytex", "tm", "utf8", "vcd", "vctrs", "vroom", "whisker", "xfun", "XLConnect", "XML", "xml2", "yaml", "zip", "zoo"))
install.packages(c("BH", "bit", "blob", "bookdown", "boot", "broom", "bslib", "cachem", "callr", "class", "cli", "codetools", "colorspace", "commonmark", "cpp11", "curl", "data.table", "dbplyr", "digest", "dplyr", "dtplyr", "evaluate", "extrafont", "fansi", "fastmap", "fontawesome", "forcats", "foreign", "fs", "gargle", "gdtools", "gert", "ggfittext", "ggplot2", "gh", "googledrive", "googlesheets4", "gtable", "haven", "highr", "hms", "htmltools", "htmlwidgets", "httpuv", "httr", "installr", "isoband", "jsonlite", "knitr", "lattice", "lubridate", "magrittr", "markdown", "Matrix", "mgcv", "modelr", "nlme", "openssl", "pillar", "pkgbuild", "pkgdown", "pkgload", "plyr", "processx", "ps", "purrr", "ragg", "Rcpp", "RCurl", "readr", "readxl", "rlang", "rmarkdown", "RODBC", "roxygen2", "rpart", "Rttf2pt1", "sass", "shiny", "sourcetools", "spatial", "stringi", "stringr", "survival", "sys", "testthat", "tibble", "tidyr", "tidyselect", "tidyverse", "tinytex", "tm", "utf8", "vcd", "vctrs", "vroom", "whisker", "xfun", "XLConnect", "XML", "xml2", "yaml", "zip", "zoo"))
install.packages(c("BH", "bit", "blob", "bookdown", "boot", "broom", "bslib", "cachem", "callr", "class", "cli", "codetools", "colorspace", "commonmark", "cpp11", "curl", "data.table", "dbplyr", "digest", "dplyr", "dtplyr", "evaluate", "extrafont", "fansi", "fastmap", "fontawesome", "forcats", "foreign", "fs", "gargle", "gdtools", "gert", "ggfittext", "ggplot2", "gh", "googledrive", "googlesheets4", "gtable", "haven", "highr", "hms", "htmltools", "htmlwidgets", "httpuv", "httr", "installr", "isoband", "jsonlite", "knitr", "lattice", "lubridate", "magrittr", "markdown", "Matrix", "mgcv", "modelr", "nlme", "openssl", "pillar", "pkgbuild", "pkgdown", "pkgload", "plyr", "processx", "ps", "purrr", "ragg", "Rcpp", "RCurl", "readr", "readxl", "rlang", "rmarkdown", "RODBC", "roxygen2", "rpart", "Rttf2pt1", "sass", "shiny", "sourcetools", "spatial", "stringi", "stringr", "survival", "sys", "testthat", "tibble", "tidyr", "tidyselect", "tidyverse", "tinytex", "tm", "utf8", "vcd", "vctrs", "vroom", "whisker", "xfun", "XLConnect", "XML", "xml2", "yaml", "zip", "zoo"))
# tidyverse系列中的purrr包为方便操作列表，提供了一系列操作列表的函数：
#
# pluck()：同 [[ 提取列表中的元素
#             keep(): 保留满足条件的元素
#             discard(): 删除满足条件的元素
#             compact(): 删除列表中的空元素
#             append()：在列表末尾增加元素
#             flatten(): 摊平列表（只摊平一层）
library(tidyverse)
remove.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
# tidyverse系列中的purrr包为方便操作列表，提供了一系列操作列表的函数：
#
# pluck()：同 [[ 提取列表中的元素
#             keep(): 保留满足条件的元素
#             discard(): 删除满足条件的元素
#             compact(): 删除列表中的空元素
#             append()：在列表末尾增加元素
#             flatten(): 摊平列表（只摊平一层）
library(tidyverse)
remove.packages("rlang")
install.packages("rlang")
install.packages("rlang")
# tidyverse系列中的purrr包为方便操作列表，提供了一系列操作列表的函数：
#
# pluck()：同 [[ 提取列表中的元素
#             keep(): 保留满足条件的元素
#             discard(): 删除满足条件的元素
#             compact(): 删除列表中的空元素
#             append()：在列表末尾增加元素
#             flatten(): 摊平列表（只摊平一层）
library(tidyverse)
install.packages("rlang")
# tidyverse系列中的purrr包为方便操作列表，提供了一系列操作列表的函数：
#
# pluck()：同 [[ 提取列表中的元素
#             keep(): 保留满足条件的元素
#             discard(): 删除满足条件的元素
#             compact(): 删除列表中的空元素
#             append()：在列表末尾增加元素
#             flatten(): 摊平列表（只摊平一层）
library(tidyverse)
# tidyverse系列中的purrr包为方便操作列表，提供了一系列操作列表的函数：
#
# pluck()：同 [[ 提取列表中的元素
#             keep(): 保留满足条件的元素
#             discard(): 删除满足条件的元素
#             compact(): 删除列表中的空元素
#             append()：在列表末尾增加元素
#             flatten(): 摊平列表（只摊平一层）
library(ggplot2)
install.packages(c("cli", "colorspace", "fansi", "fs", "utf8", "vctrs", "xml2"))
#----------------------------------------------------
## 5.数据框
# 数据框是指有若干行和列的数据集，它与矩阵类似，但并不要求所有列都是相同的类型；
# 本质上讲，数据框就是一个列表，它的每个成分都是一个向量，并且长度相同，以表格的形式展现。总之，数据框是由列向量组成、有着矩阵形式的列表。
library("tidyverse")
## 1.创建数据框
#用tibble()根据若干列向量创建tibble:
library(tidyverse)
persons = tibble(
Name = c("Ken", "Ashley", "Jennifer"),
Gender = c("Male", "Female", "Female"),
Age = c(24, 25, 23),
Major = c("Finance", "Statistics", "Computer Science")
)
## 1.创建数据框
#用tibble()根据若干列向量创建tibble:
?tibble
library(tidyverse)
persons = tibble(
Name = c("Ken", "Ashley", "Jennifer"),
Gender = c("Male", "Female", "Female"),
Age = c(24, 25, 23),
Major = c("Finance", "Statistics", "Computer Science")
)
library(tibble)
persons = tibble(
Name = c("Ken", "Ashley", "Jennifer"),
Gender = c("Male", "Female", "Female"),
Age = c(24, 25, 23),
Major = c("Finance", "Statistics", "Computer Science")
)
persons
tribble(
~Name,~Gender,~Age,~Major
"Ken", "Male", 24, "Finance",
"Ashley", "Female", 25, "Statistics",
"Jennifer", "Female", 23, "Computer Science"
)
tribble(
~Name,~Gender,~Age,~Major,
"Ken", "Male", 24, "Finance",
"Ashley", "Female", 25, "Statistics",
"Jennifer", "Female", 23, "Computer Science")
tribble
(
~Name,~Gender,~Age,~Major,
"Ken", "Male", 24, "Finance",
"Ashley", "Female", 25, "Statistics",
"Jennifer", "Female", 23, "Computer Science"
)
tribble(
~Name,~Gender,~Age,~Major,
"Ken", "Male", 24, "Finance",
"Ashley", "Female", 25, "Statistics",
"Jennifer", "Female", 23, "Computer Science")
df <- tibble(
id=1:4,
level=c(0,2,1,-1),
score=c(0.5,0.2,0.1,0.5)
)
df
names(df) <- c("id","x","y")
df
# 用as_tibble()将data.frame, matrix, 各成分等长度的list, 转换为 tibble。
# 对数据框的各列重命名：
df <- tibble(
id=1:4,
x=c(0,2,1,-1),
y=c(0.5,0.2,0.1,0.5)
)
names(df) <- c("id","level","score")
df
# 2.提取数据框的元素、子集
df$x     # 同df[["x"]], df[[2]]
# 2.提取数据框的元素、子集
df$level     # 同df[["x"]], df[[2]]
df[["x"]]
df[["level"]]
df[[2]][3]
# 用[]提取数据框的一列或多列，得到子数据框，其内可以是数值向量（列位置）、字符向量（列名）、逻辑向量（是否选择各列）。
df[1]
# (2) 以矩阵方式提取数据框的元素、子集
# 以列表形式操作并不支持行选择。以矩阵形式操作更加灵活，同时支持列选择和行选择。即用 [i, j] 指定行或列来提取数据框子集，[ , ]其内可以是数值向量、字符向量或者逻辑向量。
# 若行选择器为空，则只选择列（所有行）：
df[, "level"]
# (2) 以矩阵方式提取数据框的元素、子集
# 以列表形式操作并不支持行选择。以矩阵形式操作更加灵活，同时支持列选择和行选择。即用 [i, j] 指定行或列来提取数据框子集，[ , ]其内可以是数值向量、字符向量或者逻辑向量。
# 若行选择器为空，则只选择列（所有行）：
df[1:2, "level"]
df[, c("level","score")]   # 同df[,2:3]
# 根据条件筛选行或列：
df[df$score >= 0.5, c("id","score")]
ind = names(df) %in% c("x","y","w")
df[1:2, ind]
ind
df[1:2, ind]
ind = names(df) %in% c("level","score","w")
df[1:2, ind]
ind
names(df)
ind = names(df) %in% c("level","score")
df[1:2, ind]
# 利用现有列，创建（计算）新列：
df$sum = df$level + df$score
df
df$sum = as.character(df$sum)   # 转换列的类型
df
# 利用现有列，创建（计算）新列：
df$sum = df$level + df$score
df
df$sum = as.character(df$sum)   # 转换列的类型
df
##用[]可以对数据框的1列或多列进行赋值：
df["score"] <- c(0.8,0.5,0.2,0.4)
df[c("level", "score")] <-  list(c(1,2,1,0), c(0.1,0.2,0.3,0.4))
df
##利用现有列，创建（计算）新列：
df$sum = df$level + df$score
df
df <- tibble(
id=1:4,
x=c(0,2,1,-1),
y=c(0.5,0.2,0.1,0.5)
)
names(df) <- c("id","level","score")
df
df["score"] <- c(0.8,0.5,0.2,0.4)
df[c("level", "score")] <-  list(c(1,2,1,0), c(0.1,0.2,0.3,0.4))
df
df$sum = df$level + df$score
df
df$sum = as.character(df$sum)   # 转换列的类型
df
df["score"] <- c(0.8,0.5,0.2,0.4)
df[c("level", "score")] <-  list(c(1,2,1,0), c(0.1,0.2,0.3,0.4))
df
## (2) 以矩阵方式给数据框赋值
df[1:3,"score"] <- c(-1,0,1)
df
df[1:2,c("level","score")] <- list(c(0,0),c(0.9,1.0))
## 4. 一些有用函数
# str()或glimpse()作用在R对象上，显示该对象的结构：
str(persons)
# summary()作用在数据框/列表上，将生成各列/成分的汇总信息：
summary(persons)
rbind(
persons,
tibble(
Name="John",
Gender="23",
Age=25,
Major="Statistics"
)
)
cbind(persons, Registered = c(TRUE, TRUE, FALSE), Projects = c(3, 2, 3))
# expand.grid()可生成多个属性水平值所有组合（笛卡儿积）的数据框：
expand.grid(type = c("A","B"), class = c("M","L","XL"))
pwd
sort(x)
#-----------------------------------------------------------------
## 1. 创建与使用因子
x <- c("优", "中", "良", "优", "良", "良") # 字符向量
sort(x)
x
sort(x)
#若想规定顺序：中、良、优，正确的做法就是创建成因子，用levels指定想要的顺序：
x1 = factor(x, levels = c("中", "良", "优"))  # 转化因子型
x1
as.numeric(x1)           # x的存储形式: 整数向量
#注意：不能直接将因子数据当字符型操作，需要用as.character()转化。
type(x1)
#注意：不能直接将因子数据当字符型操作，需要用as.character()转化。
mode(x1)
#若想规定顺序：中、良、优，正确的做法就是创建成因子，用levels指定想要的顺序：
x1 = factor(x, levels = c("中", "良", "优"))  # 转化因子型
#注意：不能直接将因子数据当字符型操作，需要用as.character()转化。
mode(x1)
x1
#注意：不能直接将因子数据当字符型操作，需要用as.character()转化。
mode(x1)
#若想规定顺序：中、良、优，正确的做法就是创建成因子，用levels指定想要的顺序：
x1 <-  factor(x, levels = c("中", "良", "优"))  # 转化因子型
x1
#注意：不能直接将因子数据当字符型操作，需要用as.character()转化。
mode(x1)
#注意：不能直接将因子数据当字符型操作，需要用as.character()转化。
summary(x1)
#变成因子型后，无论是排序、统计频数、绘图等，都有了顺序：
sort(x1)
table(x1)
library(tidyverse)
library(ggplot2)
ggplot(tibble(x1), aes(x1)) +
geom_bar()
#若想规定顺序：中、良、优，正确的做法就是创建成因子，用levels指定想要的顺序：
x1 <-  factor(x, levels = c("及格", "良", "优"))  # 转化因子型
x1
as.numeric(x1)           # x的存储形式: 整数向量
#若想规定顺序：中、良、优，正确的做法就是创建成因子，用levels指定想要的顺序：
x1 <-  factor(x1, levels = c("及格", "良", "优"))  # 转化因子型
x1
as.numeric(x1)           # x的存储形式: 整数向量
#-----------------------------------------------------------------
## 1. 创建与使用因子
x1 <- c("优秀", "及格", "良", "优秀", "良", "良") # 字符向量
sort(x1)
sort(x1)
#若想规定顺序：中、良、优，正确的做法就是创建成因子，用levels指定想要的顺序：
x1 <-  factor(x1, levels = c("及格", "良", "优"))  # 转化因子型
x1
as.numeric(x1)           # x的存储形式: 整数向量
View(x2)
View(x1)
View(x2)
View(x1)
#-----------------------------------------------------------------
## 1. 创建与使用因子
x1 <- c("优秀", "及格", "良", "优秀", "良", "良") # 字符向量
sort(x1)
#若想规定顺序：中、良、优，正确的做法就是创建成因子，用levels指定想要的顺序：
x1 <-  factor(x1, levels = c("及格", "良", "优"))  # 转化因子型
x1
#若想规定顺序：中、良、优，正确的做法就是创建成因子，用levels指定想要的顺序：
x1 <-  factor(x1, levels = c("及格", "良", "优秀"))  # 转化因子型
x1
#-----------------------------------------------------------------
## 1. 创建与使用因子
x1 <- c("优秀", "及格", "良", "优秀", "良", "良") # 字符向量
sort(x1)
#若想规定顺序：中、良、优，正确的做法就是创建成因子，用levels指定想要的顺序：
x1 <-  factor(x1, levels = c("及格", "良", "优秀"))  # 转化因子型
x1
as.numeric(x1)           # x的存储形式: 整数向量
#变成因子型后，无论是排序、统计频数、绘图等，都有了顺序：
sort(x1)
table(x1)
library(tidyverse)
library(ggplot2)
x1
tibble(x1)
ggplot(tibble(x1), aes(x1)) +
geom_bar
ggplot(tibble(x1), aes(x1)) +
geom_bar
ggplot(tibble(x1), aes(x1)) +
geom_bar
ggplot(tibble(x1), aes(x1)) +
geom_bar()
x1
#用levels()函数可以访问或修改因子的水平值（将改变数据的外在表现）：
levels(x1) <- c("Fair","Good","Excellent")
x1
x2 = factor(x, levels = c("中", "良", "优"), ordered = TRUE)
x2 = factor(x1, levels = c("中", "良", "优"), ordered = TRUE)
x2
x2 = factor(x1, levels = c("及格", "良", "优秀"), ordered = TRUE)
x2
#-----------------------------------------------------------------
## 1. 创建与使用因子
x <- c("优秀", "及格", "良", "优秀", "良", "良")
x2 = factor(x, levels = c("及格", "良", "优秀"), ordered = TRUE)
x2
x2
## 2.有用函数
# table(): 统计因子各水平（或向量各元素）的出现次数（频数）:
table(x)
# cut(x, breaks, labels, ...): 将连续（数值）变量离散化，即切分为若干区间段，返回因子：
Age = c(23,15,36,47,65,53)
cut(Age, breaks = c(0,18,45,100), labels = c("Young","Middle","Old"))
## 2.有用函数
# table(): 统计因子各水平（或向量各元素）的出现次数（频数）:
table(x)
str_length(c("a", "R for data science", NA))
#-----------------------------------------------------------------
# 七、字符串
## 1.字符串的长度
library(stringr)
str_length(c("a", "R for data science", NA))
str_pad(c("a", "ab", "abc"), 3)       # 填充到长度为3
str_trunc("R for data science", 10)   # 截断到长度为10
str_trim(c("a  ", "b  ", "a b"))      # 移除空格
##2.字符串合并
str_c("x",1:3,sep="") # 同paste0("x", 1:3), paste("x", 1:3, sep="")
str_c("x", 1:3, collapse = "_")
##2.字符串合并
str_c("x",1:3,sep="_") # 同paste0("x", 1:3), paste("x", 1:3, sep="")
str_c("x", 1:3, collapse = "_")
(sprintf("%03d", 1:3)
stop
sprintf("%03d", 1:3
sprintf("%03d", 1:)
str_c("x", str_c(sprintf("%03d", 1:3)))
sprintf("%03d", 1:3)
sprintf("%02d", 1:3) #"001" "002" "003"
sprintf("%14d", 1:3) #"001" "002" "003"
sprintf("%05d", 1:3) #"001" "002" "003"
sprintf("%15d", 1:3) #"001" "002" "003"
sprintf("%2d", 1:3) #"001" "002" "003"
sprintf("%23d", 1:3) #"001" "002" "003"
sprintf("%03d", 1:3) #"001" "002" "003"
sprintf("%03d", 1:4) #"001" "002" "003"
sprintf("%01d", 1:3) #"001" "002" "003"
sprintf("%08d", 1:3) #"001" "002" "003"
sprintf("%.3d", 1:3) #"001" "002" "003"
sprintf("%.3f", 1:3) #"001" "002" "003"
sprintf("%.3f", 1:3) #"001" "002" "003"
#"%s"用来代替字符串
#"%d"用来代替数字
#%0nd 这里的"n"代指字符串的长度,如果够就用空格补齐,如果是0则用0补齐
#%m.nf 是用来处理浮点数的,m代表着字符宽度,n代表保留几位小数。
str_c("x", str_c(sprintf("%03d", 1:3)))
str_dup(c("A","B"), 3) #str_dup(string, times): 将字符串重复n次
str_dup(c("A","B"), 3) #str_dup(string, times): 将字符串重复n次
str_dup(c("A","B"), c(3,2))
str_split(x,",")
##3.字符串拆分
# str_split(string, pattern) 返回一个列表
# str_split_fixed(string, pattern, n) 返回矩阵，n 控制返回的列数
x = "10,8,7"
str_split(x,",")
str_split_fixed(x,",",n=2)
str_split_fixed(x,",",n=1)
str_split_fixed(x,",",n=3)
str_split_fixed(x,",",n=2)
cwd
setwd("D:\\Github_Code\\R-tidyverse-")
x <- 3
if(x==2)
{
x <- x+2
}
else
{
x <- x+3
}
x
if(x==2){
x <- x+2
}else{
x <- x+3
}
x
x <- 3
if(x==2){
x <- x+2
}else{
x <- x+3
}
x
# 第一层：for循环、while循环、repeat循环
# 第二层：apply函数族
# 第三层：purrr泛函式编程
# 关于跳出循环：
#
# 用关键字 next 跳出本次循环，进入下次循环
# 用关键词 break 跳出循环
# 如今for并不慢，只需要注意：
# 提前为保存循环结果分配存储空间
# 为循环体中涉及的数据选择合适的数据结构
output <-  vector("double", 4)       # 1.输出
for (i in 1:4) {                   # 2.迭代器
output[i] = mean(df[[i]])        # 3.循环体
}
for (i in 1:4) {                   # 2.迭代器
output[i] = mean(df[[i]])        # 3.循环体
}
for (i in 1:4) {                   # 2.迭代器
output[i] = mean(df[[i]])        # 3.循环体
}
output
# 第一层：for循环、while循环、repeat循环
# 第二层：apply函数族
# 第三层：purrr泛函式编程
# 关于跳出循环：
#
# 用关键字 next 跳出本次循环，进入下次循环
# 用关键词 break 跳出循环
# 如今for并不慢，只需要注意：
# 提前为保存循环结果分配存储空间
# 为循环体中涉及的数据选择合适的数据结构
df = as_tibble(iris[,1:4])
# 第一层：for循环、while循环、repeat循环
# 第二层：apply函数族
# 第三层：purrr泛函式编程
# 关于跳出循环：
#
# 用关键字 next 跳出本次循环，进入下次循环
# 用关键词 break 跳出循环
# 如今for并不慢，只需要注意：
# 提前为保存循环结果分配存储空间
# 为循环体中涉及的数据选择合适的数据结构
library(tidyverse)
df = as_tibble(iris[,1:4])
library(tibble)
df = as_tibble(iris[,1:4])
output <-  vector("double", 4)       # 1.输出
for (i in 1:4) {                   # 2.迭代器
output[i] = mean(df[[i]])        # 3.循环体
}
output
df = as_tibble(iris[,1:4])
df
df = as_tibble(iris[1:10,1:4])
df
output <-  vector("double", 4)       # 1.输出
output[i] = mean(df[[i]])        # 3.循环体
output
df = as_tibble(iris[1:10,1:4])
df
output <-  vector("double", 4)       # 1.输出
for (i in 1:4) {                   # 2.迭代器
output[i] = mean(df[[i]])        # 3.循环体
}
output
